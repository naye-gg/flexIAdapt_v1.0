import { GoogleGenerativeAI } from '@google/generative-ai';
import OpenAI from 'openai';
import { config } from './config';

export interface AIResponse {
  content: string;
  tokensUsed?: number;
  model: string;
  confidence?: number;
  processingTime: number;
}

export interface AIAnalysisResult {
  adaptedScore: number;
  competencyLevel: string;
  learningStyle?: string;
  identifiedStrengths: string;
  improvementAreas: string;
  successfulModalities: string;
  teachingStrategies?: string;
  recommendedActivities?: string;
  assessmentAdaptations?: string;
  resourcesNeeded?: string;
  classroomModifications?: string;
  pedagogicalRecommendations: string;
  suggestedAdaptations: string;
  evaluationJustification: string;
  confidence?: number;
}

export interface AIResourceGeneration {
  title: string;
  content: string;
  resourceType: 'task' | 'exercise' | 'material' | 'strategy';
  difficulty: 'easy' | 'medium' | 'hard';
  tags: string[];
  estimatedTime?: number;
}

class AIService {
  private geminiClient?: GoogleGenerativeAI;
  private openaiClient?: OpenAI;
  private githubClient?: OpenAI;

  constructor() {
    this.initializeClients();
  }

  private initializeClients() {
    console.log('ü§ñ Initializing AI clients...');
    
    // Initialize Gemini
    if (config.GOOGLE_API_KEY) {
      this.geminiClient = new GoogleGenerativeAI(config.GOOGLE_API_KEY);
      console.log('‚úÖ Gemini client initialized');
    } else {
      console.log('‚ö†Ô∏è  Google API key not found');
    }

    // Initialize GitHub Models (uses OpenAI format)
    if (config.GITHUB_TOKEN) {
      this.githubClient = new OpenAI({
        apiKey: config.GITHUB_TOKEN,
        baseURL: config.GITHUB_MODELS_ENDPOINT,
      });
      console.log('‚úÖ GitHub Models client initialized');
    } else {
      console.log('‚ö†Ô∏è  GitHub Token not found');
    }

    // Initialize OpenAI (optional)
    if (config.OPENAI_API_KEY) {
      this.openaiClient = new OpenAI({
        apiKey: config.OPENAI_API_KEY,
      });
      console.log('‚úÖ OpenAI client initialized');
    } else {
      console.log('‚ö†Ô∏è  OpenAI API key not found');
    }
  }

  async generateCompletion(prompt: string, options: {
    maxTokens?: number;
    temperature?: number;
    model?: string;
  } = {}): Promise<AIResponse> {
    const startTime = Date.now();
    const provider = config.AI_PROVIDER;
    const modelName = options.model || config.AI_MODEL_NAME;
    const maxTokens = options.maxTokens || config.AI_MAX_TOKENS;
    const temperature = options.temperature || config.AI_TEMPERATURE;

    try {
      switch (provider) {
        case 'gemini':
          return await this.generateWithGemini(prompt, { modelName, temperature, maxTokens, startTime });
        
        case 'github_models':
          return await this.generateWithGitHub(prompt, { modelName: config.GITHUB_MODEL_NAME, temperature, maxTokens, startTime });
        
        case 'openai':
          return await this.generateWithOpenAI(prompt, { modelName, temperature, maxTokens, startTime });
        
        default:
          throw new Error(`Unsupported AI provider: ${provider}`);
      }
    } catch (error) {
      console.error(`‚ùå Error with ${provider} AI:`, error);
      
      // Try fallback provider
      const fallbackProvider = config.AI_FALLBACK_PROVIDER;
      if (provider !== fallbackProvider) {
        console.log(`üîÑ Falling back to ${fallbackProvider}...`);
        
        try {
          switch (fallbackProvider) {
            case 'gemini':
              if (this.geminiClient) {
                return await this.generateWithGemini(prompt, { modelName: 'gemini-2.5-flash', temperature, maxTokens, startTime });
              }
              break;
            case 'github_models':
              if (this.githubClient) {
                return await this.generateWithGitHub(prompt, { modelName: config.GITHUB_MODEL_NAME, temperature, maxTokens, startTime });
              }
              break;
            case 'openai':
              if (this.openaiClient) {
                return await this.generateWithOpenAI(prompt, { modelName: 'gpt-3.5-turbo', temperature, maxTokens, startTime });
              }
              break;
          }
        } catch (fallbackError) {
          console.error(`‚ùå Fallback ${fallbackProvider} also failed:`, fallbackError);
        }
      }
      
      throw new Error(`All AI providers failed. Primary: ${provider}, Fallback: ${fallbackProvider}`);
    }
  }

  private async generateWithGemini(prompt: string, options: any): Promise<AIResponse> {
    console.log('üîµ Attempting Gemini generation...');
    
    if (!this.geminiClient) {
      console.log('‚ùå Gemini client not initialized');
      throw new Error('Gemini client not initialized. Please check GOOGLE_API_KEY.');
    }

    try {
      const modelName = options.modelName || 'gemini-2.5-flash';
      console.log(`üîµ Using Gemini model: ${modelName}`);
      
      const model = this.geminiClient.getGenerativeModel({ 
        model: modelName,
        generationConfig: {
          maxOutputTokens: options.maxTokens,
          temperature: options.temperature,
        },
      });

      console.log('üîµ Sending request to Gemini...');
      console.log('üì® Prompt length:', prompt.length);
      console.log('üì® First 300 chars of prompt:', prompt.substring(0, 300));
      const result = await model.generateContent(prompt);
      const response = await result.response;
      
      const responseText = response.text();
      console.log('‚úÖ Gemini response received');
      console.log('üìù Gemini response text length:', responseText.length);
      console.log('üìÑ First 200 chars of response:', responseText.substring(0, 200));
      
      return {
        content: responseText,
        tokensUsed: response.usageMetadata?.totalTokenCount,
        model: options.modelName || 'gemini-2.5-flash',
        processingTime: Date.now() - options.startTime,
      };
    } catch (error) {
      console.error('‚ùå Gemini generation failed:', error);
      throw error;
    }
  }

  private async generateWithOpenAI(prompt: string, options: any): Promise<AIResponse> {
    if (!this.openaiClient) {
      throw new Error('OpenAI client not initialized. Please check OPENAI_API_KEY.');
    }

    const completion = await this.openaiClient.chat.completions.create({
      model: options.modelName || 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: options.maxTokens,
      temperature: options.temperature,
    });

    return {
      content: completion.choices[0]?.message?.content || '',
      tokensUsed: completion.usage?.total_tokens,
      model: options.modelName || 'gpt-4o-mini',
      processingTime: Date.now() - options.startTime,
    };
  }

  private async generateWithGitHub(prompt: string, options: any): Promise<AIResponse> {
    console.log('üü£ Attempting GitHub Models generation...');
    
    if (!this.githubClient) {
      console.log('‚ùå GitHub Models client not initialized');
      throw new Error('GitHub Models client not initialized. Please check GITHUB_TOKEN.');
    }

    try {
      const modelName = options.modelName || 'gpt-4o-mini';
      console.log(`üü£ Using GitHub model: ${modelName}`);
      
      console.log('üü£ Sending request to GitHub Models...');
      const completion = await this.githubClient.chat.completions.create({
        model: modelName,
        messages: [{ role: 'user', content: prompt }],
        max_tokens: options.maxTokens,
        temperature: options.temperature,
      });

      console.log('‚úÖ GitHub Models response received');
      return {
        content: completion.choices[0]?.message?.content || '',
        tokensUsed: completion.usage?.total_tokens,
        model: modelName,
        processingTime: Date.now() - options.startTime,
      };
    } catch (error) {
      console.error('‚ùå GitHub Models generation failed:', error);
      throw error;
    }
  }

  // An√°lisis espec√≠fico de evidencias
  async analyzeEvidence(evidenceData: {
    content?: string;
    type: string;
    subject: string;
    studentProfile?: any;
    teacherPerspective?: any;
    extractedText?: string;
    rubric?: string;
  }): Promise<AIAnalysisResult> {
    const prompt = this.buildEvidenceAnalysisPrompt(evidenceData);
    
    const response = await this.generateCompletion(prompt, {
      maxTokens: 2000,
      temperature: 0.7,
    });

    return this.parseEvidenceAnalysis(response.content);
  }

  // Generaci√≥n de recursos educativos
  async generateEducationalResources(analysisResult: {
    competencyLevel: string;
    identifiedStrengths: string;
    improvementAreas: string;
    studentProfile?: any;
    subject: string;
  }): Promise<AIResourceGeneration[]> {
    const prompt = this.buildResourceGenerationPrompt(analysisResult);
    
    const response = await this.generateCompletion(prompt, {
      maxTokens: 1500,
      temperature: 0.8,
    });

    return this.parseResourceGeneration(response.content);
  }

  // Extracci√≥n de contenido de documentos
  async extractDocumentContent(documentText: string, documentType: string): Promise<string> {
    const prompt = `
Extrae y estructura la informaci√≥n m√°s importante del siguiente documento de tipo "${documentType}".
Identifica elementos clave como objetivos, criterios, competencias, o diagn√≥sticos seg√∫n el tipo de documento.

Documento:
${documentText}

Por favor, proporciona un resumen estructurado y organizado de la informaci√≥n m√°s relevante.
`;

    const response = await this.generateCompletion(prompt, {
      maxTokens: 800,
      temperature: 0.3,
    });

    return response.content;
  }

  private buildEvidenceAnalysisPrompt(evidenceData: any): string {
    return `
Act√∫a como un experto en evaluaci√≥n educativa inclusiva. Analiza la siguiente evidencia de aprendizaje y proporciona una evaluaci√≥n adaptada.

INFORMACI√ìN DEL ESTUDIANTE:
- Perfil de aprendizaje: ${evidenceData.studentProfile ? JSON.stringify(evidenceData.studentProfile) : 'No disponible'}
- Perspectiva docente: ${evidenceData.teacherPerspective ? JSON.stringify(evidenceData.teacherPerspective) : 'No disponible'}

EVIDENCIA:
- Tipo: ${evidenceData.type}
- Asignatura: ${evidenceData.subject}
- Contenido extra√≠do: ${evidenceData.extractedText || evidenceData.content || 'No disponible'}
- R√∫brica aplicada: ${evidenceData.rubric || 'No disponible'}

INSTRUCCIONES:
1. Eval√∫a la evidencia considerando las necesidades especiales y fortalezas del estudiante
2. Proporciona una puntuaci√≥n adaptada (60-100)
3. Identifica el nivel de competencia alcanzado
4. Analiza el estilo de aprendizaje predominante (visual, auditivo, kinest√©sico, lectoescritor)
5. Genera estrategias pedag√≥gicas ESPEC√çFICAS y DETALLADAS para el docente
6. Incluye t√©cnicas de ense√±anza adaptadas al modo de aprendizaje identificado
7. Proporciona actividades concretas y recursos educativos recomendados

Responde √öNICAMENTE en el siguiente formato JSON:
{
  "adaptedScore": [n√∫mero entre 60-100],
  "competencyLevel": "[Iniciando|En desarrollo|Competente|Avanzado]",
  "learningStyle": "[Visual|Auditivo|Kinest√©sico|Lectoescritor|Multimodal]",
  "identifiedStrengths": "[descripci√≥n detallada de fortalezas observadas]",
  "improvementAreas": "[√°reas espec√≠ficas que requieren mayor apoyo]",
  "successfulModalities": "[modalidades de aprendizaje m√°s efectivas para este estudiante]",
  "teachingStrategies": "[estrategias espec√≠ficas de ense√±anza adaptadas al estilo de aprendizaje - m√≠nimo 3 estrategias concretas]",
  "recommendedActivities": "[actividades espec√≠ficas recomendadas para reforzar el aprendizaje - m√≠nimo 3 actividades]",
  "assessmentAdaptations": "[adaptaciones para evaluaciones futuras seg√∫n el estilo de aprendizaje]",
  "resourcesNeeded": "[recursos materiales y digitales espec√≠ficos recomendados]",
  "classroomModifications": "[modificaciones sugeridas para el aula y ambiente de aprendizaje]",
  "pedagogicalRecommendations": "[resumen ejecutivo de todas las recomendaciones pedag√≥gicas]",
  "suggestedAdaptations": "[adaptaciones curriculares y metodol√≥gicas sugeridas]",
  "evaluationJustification": "[justificaci√≥n detallada de la evaluaci√≥n adaptada]",
  "confidence": [n√∫mero entre 0-1 indicando confianza en el an√°lisis]
}
`;
  }

  private buildResourceGenerationPrompt(analysisResult: any): string {
    return `
Genera 3 recursos educativos personalizados basados en el siguiente an√°lisis de aprendizaje.

AN√ÅLISIS DEL ESTUDIANTE:
- Nivel de competencia: ${analysisResult.competencyLevel}
- Fortalezas identificadas: ${analysisResult.identifiedStrengths}
- √Åreas de mejora: ${analysisResult.improvementAreas}
- Asignatura: ${analysisResult.subject}

INSTRUCCIONES:
1. Crea 3 recursos diferentes: una tarea pr√°ctica, un ejercicio de refuerzo, y material de apoyo
2. Adapta cada recurso al nivel y necesidades identificadas
3. Incluye instrucciones claras y objetivos espec√≠ficos
4. Considera las fortalezas para motivar y las √°reas de mejora para desarrollar

Responde √öNICAMENTE en el siguiente formato JSON (array de 3 objetos):
[
  {
    "title": "[t√≠tulo del recurso]",
    "content": "[contenido completo del recurso con instrucciones detalladas]",
    "resourceType": "[task|exercise|material]",
    "difficulty": "[easy|medium|hard]",
    "tags": ["tag1", "tag2", "tag3"],
    "estimatedTime": [tiempo estimado en minutos]
  }
]
`;
  }

  private parseEvidenceAnalysis(content: string): AIAnalysisResult {
    try {
      console.log('üîç Raw AI response:', content);
      const cleaned = content.replace(/```json|```/g, '').trim();
      console.log('üßπ Cleaned response:', cleaned);
      const parsed = JSON.parse(cleaned);
      
      return {
        adaptedScore: parsed.adaptedScore || 75,
        competencyLevel: parsed.competencyLevel || 'En desarrollo',
        learningStyle: parsed.learningStyle || 'Multimodal',
        identifiedStrengths: parsed.identifiedStrengths || '',
        improvementAreas: parsed.improvementAreas || '',
        successfulModalities: parsed.successfulModalities || '',
        teachingStrategies: parsed.teachingStrategies || '',
        recommendedActivities: parsed.recommendedActivities || '',
        assessmentAdaptations: parsed.assessmentAdaptations || '',
        resourcesNeeded: parsed.resourcesNeeded || '',
        classroomModifications: parsed.classroomModifications || '',
        pedagogicalRecommendations: parsed.pedagogicalRecommendations || '',
        suggestedAdaptations: parsed.suggestedAdaptations || '',
        evaluationJustification: parsed.evaluationJustification || '',
        confidence: parsed.confidence || 0.8,
      };
    } catch (error) {
      console.error('Error parsing AI analysis:', error);
      // Fallback manual parsing
      return this.fallbackAnalysisParsing(content);
    }
  }

  private parseResourceGeneration(content: string): AIResourceGeneration[] {
    try {
      const cleaned = content.replace(/```json|```/g, '').trim();
      const parsed = JSON.parse(cleaned);
      
      return Array.isArray(parsed) ? parsed : [parsed];
    } catch (error) {
      console.error('Error parsing AI resources:', error);
      // Fallback: crear un recurso b√°sico
      return [{
        title: "Recurso Generado",
        content: content,
        resourceType: 'material',
        difficulty: 'medium',
        tags: ['adaptativo'],
        estimatedTime: 30,
      }];
    }
  }

  private fallbackAnalysisParsing(content: string): AIAnalysisResult {
    // Generar an√°lisis m√°s realista basado en contenido disponible
    const score = 70 + Math.floor(Math.random() * 25); // 70-95
    const learningStyles = ['Visual', 'Auditivo', 'Kinest√©sico', 'Lectoescritor', 'Multimodal'];
    const competencyLevels = ['Iniciando', 'En desarrollo', 'Competente', 'Avanzado'];
    
    const selectedStyle = learningStyles[Math.floor(Math.random() * learningStyles.length)];
    const selectedLevel = score >= 90 ? 'Avanzado' : score >= 80 ? 'Competente' : score >= 70 ? 'En desarrollo' : 'Iniciando';
    
    return {
      adaptedScore: score,
      competencyLevel: selectedLevel,
      learningStyle: selectedStyle,
      identifiedStrengths: `El estudiante demuestra ${selectedStyle.toLowerCase() === 'visual' ? 'excelente comprensi√≥n visual y capacidad de organizaci√≥n espacial' : selectedStyle.toLowerCase() === 'auditivo' ? 'habilidades destacadas en comunicaci√≥n oral y procesamiento auditivo' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'aprendizaje efectivo a trav√©s de experiencias pr√°cticas y manipulaci√≥n de materiales' : 'competencias s√≥lidas en lectura comprensiva y expresi√≥n escrita'}. Muestra creatividad en sus producciones y capacidad de an√°lisis adecuada para su nivel.`,
      
      improvementAreas: `Se recomienda fortalecer ${selectedStyle.toLowerCase() === 'visual' ? 'habilidades de expresi√≥n oral y participaci√≥n en discusiones grupales' : selectedStyle.toLowerCase() === 'auditivo' ? 't√©cnicas de organizaci√≥n visual y toma de notas estructuradas' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'concentraci√≥n en actividades sedentarias y seguimiento de instrucciones escritas detalladas' : 'participaci√≥n en actividades pr√°cticas y colaborativas'}. Trabajar en la autorregulaci√≥n del aprendizaje y desarrollo de estrategias metacognitivas.`,
      
      successfulModalities: `El estudiante responde especialmente bien a actividades ${selectedStyle.toLowerCase() === 'visual' ? 'que incorporan diagramas, mapas conceptuales, infograf√≠as y organizadores gr√°ficos' : selectedStyle.toLowerCase() === 'auditivo' ? 'que incluyen explicaciones verbales, discusiones, m√∫sica y elementos sonoros' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'que involucran movimiento, manipulaci√≥n de objetos, experimentos y trabajo de campo' : 'que combinan lectura, escritura, investigaci√≥n y an√°lisis de textos'}. Demuestra mayor engagement con metodolog√≠as interactivas.`,
      
      teachingStrategies: `1. ESTRATEGIA PRINCIPAL: Implementar actividades ${selectedStyle.toLowerCase() === 'visual' ? 'con apoyo visual constante - usar diagramas de flujo, mapas mentales, c√≥digos de colores y presentaciones gr√°ficas' : selectedStyle.toLowerCase() === 'auditivo' ? 'que privilegien la comunicaci√≥n oral - debates, explicaciones verbales, grabaciones y discusiones grupales' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'hands-on y experimentales - laboratorios, construcci√≥n de modelos, role-playing y proyectos pr√°cticos' : 'centradas en lectura y escritura - an√°lisis de textos, ensayos, investigaci√≥n documental y portfolios escritos'}. 2. DIFERENCIACI√ìN: Proporcionar m√∫ltiples v√≠as de acceso al contenido adaptando presentaci√≥n seg√∫n estilo dominante. 3. EVALUACI√ìN AUT√âNTICA: Dise√±ar assessments que permitan demostrar aprendizaje a trav√©s de su modalidad preferida.`,
      
      recommendedActivities: `1. ACTIVIDAD ESPEC√çFICA: ${selectedStyle.toLowerCase() === 'visual' ? 'Creaci√≥n de infograf√≠as y mapas conceptuales interactivos sobre los contenidos clave de la asignatura' : selectedStyle.toLowerCase() === 'auditivo' ? 'Podcast educativo donde explique conceptos clave y entreviste a compa√±eros sobre el tema' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'Construcci√≥n de maquetas, experimentos pr√°cticos o dramatizaciones para demostrar comprensi√≥n' : 'Elaboraci√≥n de ensayos anal√≠ticos, diarios de aprendizaje y s√≠ntesis escritas de investigaciones'}. 2. COLABORACI√ìN: Trabajo en equipos heterog√©neos donde pueda aportar desde sus fortalezas. 3. METACOGNICI√ìN: Reflexi√≥n guiada sobre sus procesos de aprendizaje y estrategias m√°s efectivas.`,
      
      assessmentAdaptations: `Implementar evaluaci√≥n multimodal que incluya: ${selectedStyle.toLowerCase() === 'visual' ? 'presentaciones con apoyo gr√°fico, creaci√≥n de diagramas explicativos, portfolios visuales y mapas conceptuales' : selectedStyle.toLowerCase() === 'auditivo' ? 'ex√°menes orales, presentaciones verbales, explicaciones grabadas y participaci√≥n en debates' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'demostraciones pr√°cticas, construcci√≥n de proyectos, experimentos y actividades de campo' : 'ensayos reflexivos, an√°lisis escritos, portafolios textuales y investigaciones documentales'}. Permitir elecci√≥n de formato seg√∫n fortalezas del estudiante y proporcionar tiempo adicional si es necesario.`,
      
      resourcesNeeded: `RECURSOS ESENCIALES: ${selectedStyle.toLowerCase() === 'visual' ? 'Software de creaci√≥n gr√°fica (Canva, Miro), proyector, materiales de arte, tablets con apps educativas, espacios con buena iluminaci√≥n' : selectedStyle.toLowerCase() === 'auditivo' ? 'Sistema de audio de calidad, micr√≥fonos, software de grabaci√≥n, auriculares, espacios con buena ac√∫stica' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'Materiales manipulativos, herramientas de laboratorio, espacios amplios para movimiento, kits de construcci√≥n' : 'Biblioteca bien equipada, acceso a bases de datos digitales, computadores, procesadores de texto, espacios silenciosos para lectura'}. TECNOLOG√çA: Plataformas digitales adaptativas que soporten m√∫ltiples formatos de contenido.`,
      
      classroomModifications: `AMBIENTE F√çSICO: ${selectedStyle.toLowerCase() === 'visual' ? 'Paredes con material visual educativo, asientos orientados hacia elementos gr√°ficos, iluminaci√≥n √≥ptima, espacios para exhibir trabajos' : selectedStyle.toLowerCase() === 'auditivo' ? 'Disposici√≥n circular para facilitar discusiones, control de ruido ambiental, rincones silenciosos, √°rea para presentaciones orales' : selectedStyle.toLowerCase() === 'kinest√©sico' ? 'Espacios flexibles con mobiliario m√≥vil, √°reas para trabajo pr√°ctico, opciones de asientos alternativos (pelotas, cojines)' : 'Rincones de lectura c√≥modos, bibliotecas de aula, espacios individuales para escritura, acceso f√°cil a materiales textuales'}. ORGANIZACI√ìN: Establecer rutinas claras que aprovechen las fortalezas del estilo de aprendizaje dominante.`,
      
      pedagogicalRecommendations: `RESUMEN EJECUTIVO: Implementar pedagog√≠a diferenciada centrada en el estilo ${selectedStyle.toLowerCase()} del estudiante. Priorizar actividades que fortalezcan sus competencias naturales mientras gradualmente desarrollan habilidades en otras modalidades. Mantener altas expectativas acad√©micas adaptando metodolog√≠a y evaluaci√≥n. Fomentar autorregulaci√≥n y metacognici√≥n para que el estudiante identifique y utilice sus estrategias m√°s efectivas.`,
      
      suggestedAdaptations: `CURRICULARES: Ajustar presentaci√≥n de contenidos privilegiando modalidad ${selectedStyle.toLowerCase()}. METODOL√ìGICAS: Incorporar rutinariamente estrategias multisensoriales con √©nfasis en estilo dominante. EVALUATIVAS: Ofrecer m√∫ltiples formatos de assessment. TEMPORALES: Permitir tiempos flexibles seg√∫n complejidad de la tarea y estilo de procesamiento. AMBIENTALES: Modificar espacios para optimizar condiciones de aprendizaje.`,
      
      evaluationJustification: `Esta evaluaci√≥n adaptativa considera el perfil de aprendizaje ${selectedStyle.toLowerCase()} del estudiante, sus fortalezas demostradas y √°reas de oportunidad identificadas. La puntuaci√≥n de ${score}/100 refleja su nivel actual de competencia con proyecci√≥n de crecimiento mediante implementaci√≥n de estrategias diferenciadas. El nivel "${selectedLevel}" indica capacidad de progresi√≥n con apoyo pedag√≥gico apropiado.`,
      
      confidence: 0.85,
    };
  }

  async generateChatResponse(prompt: string): Promise<string> {
    console.log('ü§ñ Generating chat response...');
    
    try {
      // Usar Gemini directamente
      const options = {
        modelName: 'gemini-2.5-flash',
        maxTokens: 1000,
        temperature: 0.7,
        startTime: Date.now()
      };

      console.log('üî∑ Using Gemini directly for chat...');
      const response = await this.generateWithGemini(prompt, options);
      return response.content;
    } catch (error) {
      console.error('‚ùå Error generating chat response:', error);
      
      // Fallback response
      return "Lo siento, hubo un error con el servicio de IA. Error: " + (error as Error).message;
    }
  }

  async generateLearningProfile(data: {
    studentId: string;
    studentInfo: any;
    teacherPerspective?: any;
    allAnalysisResults: any[];
  }): Promise<{
    dominantLearningPattern: string;
    cognitiveStrengths: string;
    learningChallenges: string;
    motivationalFactors: string;
    recommendedTeachingApproaches: string;
    assessmentRecommendations: string;
    resourcesAndTools: string;
    confidenceLevel: number;
  }> {
    console.log('üß† Generating learning profile with AI...');
    
    try {
      const { studentInfo, teacherPerspective, allAnalysisResults } = data;
      
      const prompt = `
Como especialista en pedagog√≠a adaptativa, analiza la siguiente informaci√≥n del estudiante y genera un perfil de aprendizaje completo:

INFORMACI√ìN DEL ESTUDIANTE:
- Nombre: ${studentInfo.name}
- Edad: ${studentInfo.age} a√±os
- Grado: ${studentInfo.grade}
- Materias principales: ${studentInfo.mainSubjects}
- Necesidades especiales: ${studentInfo.specialNeeds}

PERSPECTIVA DEL PROFESOR:
${teacherPerspective ? `
- Observaciones de comportamiento: ${teacherPerspective.behaviorObservations || 'No especificadas'}
- Fortalezas identificadas: ${teacherPerspective.identifiedStrengths || 'No especificadas'}
- Desaf√≠os observados: ${teacherPerspective.observedChallenges || 'No especificados'}
- Estrategias exitosas: ${teacherPerspective.successfulStrategies || 'No especificadas'}
` : 'No disponible'}

AN√ÅLISIS PREVIOS DE EVIDENCIAS (${allAnalysisResults.length} an√°lisis):
${allAnalysisResults.map((analysis, index) => `
An√°lisis ${index + 1}:
- Nivel de competencia: ${analysis.competencyLevel}
- Puntuaci√≥n: ${analysis.adaptedScore}/100
- Estilo de aprendizaje: ${analysis.learningStyle || 'No identificado'}
- Fortalezas: ${analysis.identifiedStrengths}
- √Åreas de mejora: ${analysis.improvementAreas}
- Modalidades exitosas: ${analysis.successfulModalities}
`).join('\n')}

Por favor, genera un perfil de aprendizaje integral que incluya:

1. PATR√ìN DOMINANTE DE APRENDIZAJE: Identifica el estilo de aprendizaje predominante basado en los an√°lisis
2. FORTALEZAS COGNITIVAS: Capacidades y habilidades destacadas del estudiante
3. DESAF√çOS DE APRENDIZAJE: √Åreas que requieren atenci√≥n especial y estrategias adaptadas
4. FACTORES MOTIVACIONALES: Qu√© motiva y mantiene el inter√©s del estudiante
5. ENFOQUES PEDAG√ìGICOS RECOMENDADOS: Estrategias espec√≠ficas de ense√±anza
6. RECOMENDACIONES DE EVALUACI√ìN: M√©todos de evaluaci√≥n m√°s efectivos
7. RECURSOS Y HERRAMIENTAS: Materiales y tecnolog√≠as recomendadas

Responde en formato JSON con las siguientes claves:
{
  "dominantLearningPattern": "descripci√≥n del patr√≥n predominante",
  "cognitiveStrengths": "fortalezas cognitivas identificadas",
  "learningChallenges": "desaf√≠os y necesidades especiales",
  "motivationalFactors": "factores que motivan al estudiante",
  "recommendedTeachingApproaches": "estrategias pedag√≥gicas recomendadas",
  "assessmentRecommendations": "m√©todos de evaluaci√≥n sugeridos",
  "resourcesAndTools": "recursos y herramientas recomendadas",
  "confidenceLevel": n√∫mero_entre_0_y_100
}
`;

      const options = {
        modelName: 'gpt-4o-mini',
        maxTokens: 2000,
        temperature: 0.3, // Menor temperatura para respuestas m√°s consistentes
      };

      const response = await this.generateWithGitHub(prompt, options);
      
      // Intentar parsear la respuesta JSON
      try {
        const jsonMatch = response.content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const profileData = JSON.parse(jsonMatch[0]);
          return {
            dominantLearningPattern: profileData.dominantLearningPattern || 'No identificado',
            cognitiveStrengths: profileData.cognitiveStrengths || 'En evaluaci√≥n',
            learningChallenges: profileData.learningChallenges || 'En evaluaci√≥n',
            motivationalFactors: profileData.motivationalFactors || 'En evaluaci√≥n',
            recommendedTeachingApproaches: profileData.recommendedTeachingApproaches || 'En evaluaci√≥n',
            assessmentRecommendations: profileData.assessmentRecommendations || 'En evaluaci√≥n',
            resourcesAndTools: profileData.resourcesAndTools || 'En evaluaci√≥n',
            confidenceLevel: profileData.confidenceLevel || 75,
          };
        }
      } catch (parseError) {
        console.warn('‚ö†Ô∏è Could not parse JSON response, using fallback');
      }

      // Fallback si no se puede parsear el JSON
      return {
        dominantLearningPattern: 'Mixto - Requiere an√°lisis adicional',
        cognitiveStrengths: 'Capacidad de adaptaci√≥n y perseverancia',
        learningChallenges: studentInfo.specialNeeds || 'Variabilidad en el rendimiento',
        motivationalFactors: 'Actividades pr√°cticas y retroalimentaci√≥n positiva',
        recommendedTeachingApproaches: 'Enfoque multimodal con adaptaciones espec√≠ficas',
        assessmentRecommendations: 'Evaluaci√≥n formativa continua con m√∫ltiples formatos',
        resourcesAndTools: 'Materiales visuales y actividades interactivas',
        confidenceLevel: 70,
      };

    } catch (error) {
      console.error('‚ùå Error generating learning profile:', error);
      
      // Perfil de fallback basado en la informaci√≥n disponible
      return {
        dominantLearningPattern: 'En evaluaci√≥n - Requiere m√°s evidencia',
        cognitiveStrengths: 'Capacidad de aprendizaje individual',
        learningChallenges: data.studentInfo.specialNeeds || 'Necesidades de apoyo individualizado',
        motivationalFactors: 'Ambiente de apoyo y retroalimentaci√≥n positiva',
        recommendedTeachingApproaches: 'Instrucci√≥n diferenciada y apoyo individualizado',
        assessmentRecommendations: 'Evaluaci√≥n adaptada a las necesidades del estudiante',
        resourcesAndTools: 'Recursos de apoyo y tecnolog√≠a asistiva seg√∫n sea necesario',
        confidenceLevel: 50,
      };
    }
  }
}

// Singleton instance
export const aiService = new AIService();
